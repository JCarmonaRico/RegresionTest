package com.acc.regresiontest.com.comparator.bussineslogic;


import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;


/**
 * 
 * Expected format of the node (there are no required fields)
 * {
 *   id          : "string" // will be autogenerated if omitted
 *   text        : "string" // node text
 *   icon        : "string" // string for custom
 *   state       : {
 *     opened    : boolean  // is the node open
 *     disabled  : boolean  // is the node disabled
 *     selected  : boolean  // is the node selected
 *   },
 *   children    : []  // array of strings or objects
 *   li_attr     : {}  // attributes for the generated LI node
 *   a_attr      : {}  // attributes for the generated A node
 * }
 * 
 * @see		https://www.jstree.com/docs/json/
 *
 */
public class JsTreeNodeElement {
	
	private static final String ELEMENT_SEPARATOR = "/";
	private static final String STRING_EXPECTED_VALUE = "Valor esperado: ";
	private static final String STRING_REAL_VALUE = "Valor encontrado: ";
//	private static final String ICON_NODE_WITH_DIFFERENCE = "imagenes/files_icon.png";
//	private static final String ICON_EXPECTED_VALUE = "imagenes/ok_icon.png";
//	private static final String ICON_REAL_VALUE = "imagenes/error_icon.png";
	
	private String text = null;
	private String icon = null;
	private Map<String, JsTreeNodeElement> children = null;
	
	public JsTreeNodeElement (String text, String icon) throws Exception{
		super();
		if (text == null || text.trim().length() == 0){
			throw new Exception("Constructor Exception: input text might not be null or empty");
		}
		this.text = text;
		this.icon = icon;
		this.children = new HashMap<String, JsTreeNodeElement>();
	}
	
	public void addDifference (String elementString, String expectedValue, String realValue) throws Exception{
		
		// Controls null or empty input string
		if (elementString == null || elementString.trim().length() == 0){
			throw new Exception("addDifference Exception: input string might not be null or empty");
		}
		
		// Trim input string
		elementString = elementString.trim();

		// Removes separator if input string ends with it
		if (elementString.endsWith(ELEMENT_SEPARATOR)){
			elementString = elementString.substring(0, elementString.lastIndexOf(ELEMENT_SEPARATOR));
		}

		// Removes separator if input string begins with it
		if (elementString.startsWith(ELEMENT_SEPARATOR)){
			elementString = elementString.substring(1, elementString.length());
		}
		
		if (elementString.contains(ELEMENT_SEPARATOR)){
			
			int indexFirstSeparator = elementString.indexOf(ELEMENT_SEPARATOR);
			String firstElement = elementString.substring(0, indexFirstSeparator);
			String otherElements = elementString.substring(indexFirstSeparator + 1, elementString.length());
			
			if (this.children.containsKey(firstElement)){
				this.children.get(firstElement).addDifference(otherElements, expectedValue, realValue);
			}else{
				JsTreeNodeElement newChild = new JsTreeNodeElement(firstElement, null);
				newChild.addDifference(otherElements, expectedValue, realValue);
				this.children.put(newChild.text, newChild);
			}
			
		}else{

			if (expectedValue != null && realValue != null){
				
				if (this.children.containsKey(elementString)){
					this.children.get(elementString).addDifference(STRING_EXPECTED_VALUE+expectedValue, null, null);
					this.children.get(elementString).addDifference(STRING_REAL_VALUE+realValue, null, null);
				}else{
					JsTreeNodeElement newChild = new JsTreeNodeElement(elementString, null);
					newChild.addDifference(STRING_EXPECTED_VALUE+expectedValue, null, null);
					newChild.addDifference(STRING_REAL_VALUE+realValue, null, null);
					this.children.put(newChild.text, newChild);
				}
				
			}else{
				JsTreeNodeElement newChild = new JsTreeNodeElement(elementString, null);
				this.children.put(newChild.text, newChild);
			}
			
		}
		
	}

	public String toJSON(){
		StringBuilder sb = new StringBuilder();
		
		sb.append("{'text' : '"+this.text+"'");
		
		if (this.icon != null && this.icon.length() > 0){
			sb.append(",'icon' : '"+this.icon+"'");
		}
		
		if (this.children != null && !this.children.isEmpty()){
			sb.append(",'children' : [");
			
			Iterator<JsTreeNodeElement> it = this.children.values().iterator();
			boolean first = true;
			while(it.hasNext()) {
				JsTreeNodeElement theNext = it.next();
				
				if (!first){
					sb.append(",").append(theNext.toJSON());
				}else{
					sb.append(theNext.toJSON());
					first = false;
				}
			}

			sb.append("]");
		}
		
		sb.append("}");
		
		return sb.toString();
	}
	
}
